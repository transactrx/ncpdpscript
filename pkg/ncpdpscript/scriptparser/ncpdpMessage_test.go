package scriptparser

import (
	"errors"
	"log"
	"testing"
)

var testNCPDPMessage = "016904D0B1SMAR0     1011326148644     20220722          \u001E\u001CAM04\u001CC24WR9AP4KV57\u001CCCDANNY\u001CCDHAZELWOOD\u001CC90\u001CC3001\u001CC61\u001E\u001CAM01\u001CC419510521\u001CC51\u001CCADANNY\u001CCBHAZELWOOD\u001CCM15 PONDEROSA DR\u001CCNLONOKE\u001CCOAR\u001CCP72086\u001CCQ8702670944\u001C4X0\u001D\u001E\u001CAM07\u001CEM1\u001CD26249119\u001CE103\u001CD780777027310\u001CE7250\u001CD300\u001CD51\u001CD61\u001CD80\u001CDE20220722\u001CDJ3\u001CC81\u001CDT0\u001C28EA\u001CU799\u001E\u001CAM11\u001CD9A\u001CDC400{\u001CE3400{\u001CDQ400A\u001CDU800A\u001CDN07\u001E\u001CAM03\u001CEZ01\u001CDB1942896055\u001CDRRABB\u001C2JNOAH\u001C2MCABOT\u001C2NAR\u001C2P72023\u001E\u001CAM13\u001CVE1\u001CWE02"
var testBadBin = "A16904D0B1SMAR0     1011326148644     20220722          \u001E\u001CAM04\u001CC24WR9AP4KV57\u001CCCDANNY\u001CCDHAZELWOOD\u001CC90\u001CC3001\u001CC61\u001E\u001CAM01\u001CC419510521\u001CC51\u001CCADANNY\u001CCBHAZELWOOD\u001CCM15 PONDEROSA DR\u001CCNLONOKE\u001CCOAR\u001CCP72086\u001CCQ8702670944\u001C4X0\u001D\u001E\u001CAM07\u001CEM1\u001CD26249119\u001CE103\u001CD780777027310\u001CE7250\u001CD300\u001CD51\u001CD61\u001CD80\u001CDE20220722\u001CDJ3\u001CC81\u001CDT0\u001C28EA\u001CU799\u001E\u001CAM11\u001CD9A\u001CDC400{\u001CE3400{\u001CDQ400A\u001CDU800A\u001CDN07\u001E\u001CAM03\u001CEZ01\u001CDB1942896055\u001CDRRABB\u001C2JNOAH\u001C2MCABOT\u001C2NAR\u001C2P72023\u001E\u001CAM13\u001CVE1\u001CWE02"
var testBadDOS = "016904D0B1SMAR0     1011326148644     2A220722          \u001E\u001CAM04\u001CC24WR9AP4KV57\u001CCCDANNY\u001CCDHAZELWOOD\u001CC90\u001CC3001\u001CC61\u001E\u001CAM01\u001CC419510521\u001CC51\u001CCADANNY\u001CCBHAZELWOOD\u001CCM15 PONDEROSA DR\u001CCNLONOKE\u001CCOAR\u001CCP72086\u001CCQ8702670944\u001C4X0\u001D\u001E\u001CAM07\u001CEM1\u001CD26249119\u001CE103\u001CD780777027310\u001CE7250\u001CD300\u001CD51\u001CD61\u001CD80\u001CDE20220722\u001CDJ3\u001CC81\u001CDT0\u001C28EA\u001CU799\u001E\u001CAM11\u001CD9A\u001CDC400{\u001CE3400{\u001CDQ400A\u001CDU800A\u001CDN07\u001E\u001CAM03\u001CEZ01\u001CDB1942896055\u001CDRRABB\u001C2JNOAH\u001C2MCABOT\u001C2NAR\u001C2P72023\u001E\u001CAM13\u001CVE1\u001CWE02"
var testBadFields = "016904D0B1SMAR0     1011326148644     20220722          \u001E\u001CAM04\u001CC24WR9AP4KV57\u001CCCDANNY\u001CCDHAZELWOOD\u001CC90\u001CC3001\u001CC61\u001E\u001CAM01\u001CC419510521\u001CC51\u001CCADANNY\u001CCBHAZELWOOD\u001CCM15 PONDEROSA DR\u001CCNLONOKE\u001CCOAR\u001CCP72086\u001CCQ8702670944\u001C4X0\u001D\u001E\u001CAM07\u001CEM1\u001CD26249119\u001CE103\u001CD780777027310\u001CE7250\u001CD300\u001CD51\u001CD61\u001CD80\u001CDE20220722\u001CDJ3\u001CC81\u001CDT0\u001C28EA\u001CU799\u001E\u001CAM11\u001CD9A\u001CDC400{\u001CE3400{\u001CDQ400A\u001CDU800A\u001CDN07\u001E\u001CAM03\u001CEZ01\u001CDB1942896055\u001CDRRABB\u001C2JNOAH\u001C2MCABOT\u001C2NAR\u001C2P72023\u001E\u001CAM13\u001C\u001CVE1\u001CWE02"
var testBadSegments = "016904D0B1SMAR0     1011326148644     20220722          \u001E\u001CAM04\u001CC24WR9AP4KV57\u001CCCDANNY\u001CCDHAZELWOOD\u001CC90\u001CC3001\u001CC61\u001E\u001CAM01\u001CC419510521\u001CC51\u001CCADANNY\u001CCBHAZELWOOD\u001CCM15 PONDEROSA DR\u001CCNLONOKE\u001CCOAR\u001CCP72086\u001CCQ8702670944\u001C4X0\u001D\u001E\u001E\u001CAM07\u001CEM1\u001CD26249119\u001CE103\u001CD780777027310\u001CE7250\u001CD300\u001CD51\u001CD61\u001CD80\u001CDE20220722\u001CDJ3\u001CC81\u001CDT0\u001C28EA\u001CU799\u001E\u001CAM11\u001CD9A\u001CDC400{\u001CE3400{\u001CDQ400A\u001CDU800A\u001CDN07\u001E\u001CAM03\u001CEZ01\u001CDB1942896055\u001CDRRABB\u001C2JNOAH\u001C2MCABOT\u001C2NAR\u001C2P72023\u001E\u001CAM13\u001CVE1\u001CWE02"

var ncpdpMessageTester *ncpdpMessage

func init() {
	var gInitError error
	ncpdpMessageTester, gInitError = NewNCPDPMessage([]byte(testNCPDPMessage))
	if gInitError != nil {
		log.Panic(gInitError)
	}

}
func TestNcpdpMessage_Rendering(t *testing.T) {
	want := testNCPDPMessage
	got, err := ncpdpMessageTester.String()
	if err != nil {
		log.Panic(err)
	}
	if got != want {
		t.Errorf("got %q, wanted %q", got, want)
	}

}
func BenchmarkNewNCPDPMessage(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, parseErr := NewNCPDPMessage([]byte(testNCPDPMessage))
		if parseErr != nil {
			b.Errorf("error parseing new message %v", parseErr)
		}
	}

}
func TestLookupByID(t *testing.T) {
	fieldId := "04CC"
	f, err := ncpdpMessageTester.groups[0].GetFieldById(fieldId)
	if err != nil {
		log.Panic(err)
	}
	got := f.fieldData
	want := "DANNY"
	if got != want {
		t.Errorf("got %q, wanted %q", got, want)
	}
}

func TestLookupByHeaderStringValue(t *testing.T) {
	fieldId := "header:bin"
	f, err := ncpdpMessageTester.groups[0].GetFieldById(fieldId)
	if err != nil {
		log.Panic(err)
	}
	got := f.fieldData
	want := "016904"
	if got != want {
		t.Errorf("got %q, wanted %q", got, want)
	}
}
func TestLookupByHeaderIntValue(t *testing.T) {
	fieldId := "header:transactionCount"
	f, err := ncpdpMessageTester.groups[0].GetFieldById(fieldId)
	if err != nil {
		log.Panic(err)
	}
	got, err := f.int()
	if err != nil {
		log.Panic(err)
	}
	want := int(1)
	if *got != want {
		t.Errorf("got %d, wanted %d", *got, want)
	}
}
func TestBadBin(t *testing.T) {
	_, err := NewNCPDPMessage([]byte(testBadBin))
	if !errors.Is(err, NCPDPFormatError) {
		t.Errorf("got %+v, expected %+v", err, NCPDPFormatError)
	}
}
func TestBadDOS(t *testing.T) {
	_, err := NewNCPDPMessage([]byte(testBadDOS))
	if !errors.Is(err, NCPDPFormatError) {
		t.Errorf("got %+v, expected %+v", err, NCPDPFormatError)
	}
}

func TestBadField(t *testing.T) {
	_, err := NewNCPDPMessage([]byte(testBadFields))
	if !errors.Is(err, NCPDPFormatError) {
		t.Errorf("got %+v, expected %+v", err, NCPDPFormatError)
	}
}

func TestBadSeg(t *testing.T) {
	_, err := NewNCPDPMessage([]byte(testBadSegments))
	if !errors.Is(err, NCPDPFormatError) {
		t.Errorf("got %+v, expected %+v", err, NCPDPFormatError)
	}
}
